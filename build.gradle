plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.107'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://maven.ithundxr.dev/snapshots" } // Registrate

    maven { url = "https://maven.ftb.dev/releases" } // FTB
    maven {
        //Modrinth -> 旅行地图api
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        //Architectury
        name = 'architectury'
        url = 'https://maven.architectury.dev'
    }


    maven { url = 'https://jitpack.io' }
    maven {
        name = 'Nucleoid'
        url = 'https://maven.nucleoid.xyz/'
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    mavenLocal()
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.21.1, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
//    runtimeOnly "mezz.jei:jei-${minecraft_version}:${jei_version}"
     localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

//    localRuntime files("./libs/sodium-neoforge-0.6.9+mc1.21.1.jar")
//    localRuntime files("./libs/iris-neoforge-1.8.12+mc1.21.1.jar")


    implementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = true }
    implementation("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}")
    compileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly("dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}")
    implementation("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation "maven.modrinth:uranus:BBb3HOQ5"
    implementation "maven.modrinth:jupiter:I4i9vhEW"
    implementation("dev.architectury:architectury-neoforge:13.0.8")
    compileOnly files("libs/IceAndFireCE-2.0-beta.7-1.21.1-neoforge.jar") //找不到Maven所以从Modrinth下的
    runtimeOnly(files("libs/IceAndFireCE-2.0-beta.7-1.21.1-neoforge.jar"))
}


var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

tasks.named('build') {
    dependsOn tasks.named('sourcesJar')
}

sourceSets.main.resources.srcDir generateModMetadata

neoForge.ideSyncTask generateModMetadata


publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
